#!/bin/bash

# Get the number of changed files
NUM_FILES=$(git diff --cached --name-only | wc -l)

# Get the number of additions and deletions
NUM_ADDITIONS=$(git diff --cached --numstat | awk '{ sum += $1 } END { print sum }')
NUM_DELETIONS=$(git diff --cached --numstat | awk '{ sum += $2 } END { print sum }')

# Get the user's initials
GIT_USER=$(git config user.name)
INITIALS=$(echo $GIT_USER | awk '{ print substr($1, 1, 1) substr($2, 1, 1) }')

# Define thresholds
SMALL_CHANGE_THRESHOLD=5
MEDIUM_CHANGE_THRESHOLD=10

# Function to determine the Gitmoji based on the file path
get_gitmoji_for_file() {
  local file="$1"
  case "$file" in
    configs/*|config/*) echo "🔧" ;;   # Config changes
    core/*) echo "🏗️" ;;               # Core changes
    minikube/*) echo "🔨" ;;           # Minikube changes
    services/*) echo "🔧" ;;           # Services changes
    terminal/*) echo "🖥" ;;           # Terminal changes
    web/*) echo "🌐" ;;                # Web changes
    wiki/*) echo "📚" ;;               # Wiki changes
    *) echo "📝" ;;                    # Other changes
  esac
}

# Determine the overall Gitmoji based on the level of changes
if [ "$NUM_FILES" -le "$SMALL_CHANGE_THRESHOLD" ]; then
  OVERALL_GITMOJI="🔍" # Small change
  LEVEL="small"
elif [ "$NUM_FILES" -le "$MEDIUM_CHANGE_THRESHOLD" ]; then
  OVERALL_GITMOJI="✨" # Medium change
  LEVEL="medium"
else
  OVERALL_GITMOJI="💥" # Large change
  LEVEL="large"
fi

# Determine the Gitmoji for each file and construct the commit message
COMMIT_MESSAGE=""

if [ "$NUM_FILES" -eq 1 ]; then
  ALTERED_FILE=$(git diff --cached --name-only)
  GITMOJI=$(get_gitmoji_for_file "$ALTERED_FILE")
  COMMIT_MESSAGE="$GITMOJI $INITIALS: Updated $ALTERED_FILE - a $LEVEL change."
else
  FILES=$(git diff --cached --name-only)
  for FILE in $FILES; do
    GITMOJI=$(get_gitmoji_for_file "$FILE")
    COMMIT_MESSAGE+="$GITMOJI Updated $FILE"$'\n'
  done
  COMMIT_MESSAGE="$OVERALL_GITMOJI $INITIALS: $NUM_FILES files with $NUM_ADDITIONS additions and $NUM_DELETIONS deletions - a $LEVEL change.\n$COMMIT_MESSAGE"
fi

# Output the commit message to the provided file
echo -e "$COMMIT_MESSAGE" > "$1"
